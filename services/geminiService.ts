import { GoogleGenAI, Modality, Part } from "@google/genai";
import { ImageFile } from "../types";

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const fileToGenerativePart = async (file: File): Promise<Part> => {
  const base64EncodedDataPromise = new Promise<string>((resolve) => {
    const reader = new FileReader();
    reader.onloadend = () => {
      if (typeof reader.result === 'string') {
        resolve(reader.result.split(',')[1]);
      }
    };
    reader.readAsDataURL(file);
  });
  const base64Data = await base64EncodedDataPromise;
  return {
    inlineData: {
      data: base64Data,
      mimeType: file.type,
    },
  };
};

export const generateStyledImage = async (
  modelImage: ImageFile,
  itemImages: ImageFile[],
  prompt: string
): Promise<string> => {
  try {
    const modelImagePart = await fileToGenerativePart(modelImage.file);
    const itemImageParts = await Promise.all(
      itemImages.map((img) => fileToGenerativePart(img.file))
    );

    // Structure the parts array to explicitly label the model and each garment image.
    // This reduces ambiguity and helps the model distinguish between the subject and the items.
    const parts: Part[] = [
        { text: prompt },
        { text: "\n\n[Model Image]:" },
        modelImagePart,
    ];

    itemImageParts.forEach((part, index) => {
        parts.push({ text: `\n\n[Garment Image ${index + 1}]:` });
        parts.push(part);
    });

    const contents: { parts: Part[] } = { parts };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: contents,
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
            const base64ImageBytes: string = part.inlineData.data;
            return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
        }
    }
    throw new Error("No image was generated by the API.");

  } catch (error) {
    console.error("Error generating image with Gemini:", error);
    if (error instanceof Error) {
        return Promise.reject(error);
    }
    return Promise.reject(new Error('An unknown error occurred during image generation.'));
  }
};